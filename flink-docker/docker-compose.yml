services:
  jobmanager:
    image: flink:latest
    depends_on:
      - kafka-0
      - kafka-1
    networks: 
      - kafka
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        jobmanager.rpc.port: 6123
        jobmanager.memory.process.size: 1600m
    volumes:
      - jobmanager-data:/opt/flink/log

  taskmanager:
    image: flink:latest
    depends_on:
      - kafka-0
      - kafka-1
      - jobmanager
    networks:
      - kafka
    command: taskmanager
    scale: 2
    environment:
      - |
        FLINK_PROPERTIES= 
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        taskmanager.memory.process.size: 1728m
    volumes:
      - taskmanager-data:/opt/flink/log

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    volumes:
      - ./kafka-ui/config.yml:/etc/kafkaui/dynamic_config.yaml
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - kafka-0
      - kafka-1
    networks:
      - kafka
    ports:
      - '8080:8080'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8080 || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka-0:
    image: 'bitnami/kafka:latest'
    environment:
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-0:9093,1@kafka-1:9093
      KAFKA_KRAFT_CLUSTER_ID: abcdefghijklmnopqrstuv
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-0:9092
      EXTRA_ARGS: "-Xms128m -Xmx256m"
      KAFKA_CFG_NODE_ID: 0
    networks:
      - kafka
    volumes:
      - kafka_0_data:/bitnami/kafka
    healthcheck:
      test: "bash -c 'printf \"\" > /dev/tcp/kafka-0/9092; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  kafka-1:
    image: 'bitnami/kafka:latest'
    environment:
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-0:9093,1@kafka-1:9093
      KAFKA_KRAFT_CLUSTER_ID: abcdefghijklmnopqrstuv
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      EXTRA_ARGS: "-Xms128m -Xmx256m"
      KAFKA_CFG_NODE_ID: 1
    networks:
      - kafka
    volumes:
      - kafka_1_data:/bitnami/kafka
    healthcheck:
      test: "bash -c 'printf \"\" > /dev/tcp/kafka-1/9092; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    networks:
      - kafka
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql  # Mounts the init.sql file
      - ./sql/entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh  # Mounts the entrypoint.sh file
    entrypoint: ["/docker-entrypoint-initdb.d/entrypoint.sh"]  # Executes the entrypoint.sh file

networks:
  kafka:

volumes:
  jobmanager-data:
  taskmanager-data:
  kafka_0_data:
    driver: local
  kafka_1_data:
    driver: local
  postgres_data:  # Declares a volume for PostgreSQL data
